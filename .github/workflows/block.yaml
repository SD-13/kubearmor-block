name: ci-test-controllers

on:
  workflow_dispatch:
  push: 
    branches:
      - "debug*"
    paths:
      - ".github/workflows/ci-test-ub2204.yml"

# Declare default permissions as read only.
permissions: read-all

jobs:
  kubearmor-test:
    name: Test KubeArmor
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      RUNTIME: "containerd"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Create k3s Cluster
        run: |
          curl -sfL https://raw.githubusercontent.com/kubearmor/KubeArmor/main/contribution/k3s/install_k3s.sh | RUNTIME=containerd bash

      - name: Installing Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      # - name: Install KubeArmor stable using Helm
      #   timeout-minutes: 7
      #   run: |
      #     helm repo add kubearmor https://kubearmor.github.io/charts
      #     helm repo update kubearmor
      #     helm upgrade --install kubearmor-operator kubearmor/kubearmor-operator -n kubearmor --create-namespace --set autoDeploy=true
      #     kubectl wait --for=condition=ready --timeout=5m -n kubearmor pod -l kubearmor-app=kubearmor-operator
      #     kubectl get pods -A
      #     kubectl wait -n kubearmor --timeout=5m --for=jsonpath='{.status.phase}'=Running kubearmorconfigs/kubearmor-default
          
      #     while [ ! "$(kubectl wait --timeout=5s --for=condition=ready pod -l kubearmor-app,kubearmor-app!=kubearmor-snitch -n kubearmor >/dev/null 2>&1; echo $?)" -eq 0 ]; do
      #       kubectl rollout status --timeout=5m deployment -n kubearmor -l kubearmor-app,kubearmor-app!=kubearmor-controller -n kubearmor
      #       kubectl rollout status --timeout=5m daemonset -l kubearmor-app=kubearmor -n kubearmor
      #       kubectl rollout status --timeout=5m deployment -n kubearmor -l kubearmor-app=kubearmor-controller -n kubearmor
      #       kubectl get pods -A
      #     done  


      - name: Install agents
        run: |
          helm upgrade --install agents oci://public.ecr.aws/k9v9d5v2/kspm-runtime \
          -n agents --create-namespace \
          --set global.agents.enabled=true \
          --set global.agents.joinToken="${{ secrets.JOIN_TOKEN }}" \
          --set global.agents.url="stage.accuknox.com" \
          --set kubearmor-operator.enabled=true \
          --set kubearmor-operator.autoDeploy=true \
          --version v0.1.13

      - name: wait for agents to be running
        run: bash agents-status.sh
        working-directory: ./examples

      - name: Deploy multiubuntu deployment
        run: |
          kubectl apply -f multiubuntu-deployment.yaml
          kubectl rollout status --timeout=5m deployment ubuntu-1-deployment -n multiubuntu
        working-directory: ./examples

      - name: Apply KSP
        run: |
          kubectl apply -f k8s-workload-policy.yaml
          sleep 5
        working-directory: ./examples

      - name: Execute ls in ubuntu pod with ksp present
        run: |
          # POD_NAME=$(kubectl get pod -n multiubuntu -l container=ubuntu-1 -o name)
          PODS_OUTPUT=$(kubectl get pods -n multiubuntu -o jsonpath="{.items[*].metadata.name}")
          POD_NAME=$(echo "$PODS_OUTPUT" | tr ' ' '\n' | grep '^ubuntu-1-deployment' | head -n 1)
          echo "Executing 'ls' inside pod: $POD_NAME"
          RESULT=$(kubectl exec $POD_NAME -n multiubuntu -- bash -c "ls" 2>&1 || true)
          echo "Command result: $RESULT"
          sleep 10

      - name: Execute hostname in ubuntu pod with ksp present
        run: |
          # POD_NAME=$(kubectl get pod -n multiubuntu -l container=ubuntu-1 -o name)
          PODS_OUTPUT=$(kubectl get pods -n multiubuntu -o jsonpath="{.items[*].metadata.name}")
          POD_NAME=$(echo "$PODS_OUTPUT" | tr ' ' '\n' | grep '^ubuntu-1-deployment' | head -n 1)
          echo "Executing 'hostname' inside pod: $POD_NAME"
          RESULT=$(kubectl exec $POD_NAME -n multiubuntu -- bash -c "hostname" 2>&1 || true)
          echo "Command result: $RESULT"
          if [[ "$RESULT" == *"Permission denied"* ]]; then
            echo "Permission Denied, test passed"
          else
            echo "no Permission Denied, test failed"
          fi

      # - name: Delete KSP
      #   run: |
      #     kubectl delete -f k8s-workload-policy.yaml
      #     sleep 5
      #   working-directory: ./examples
      #
      # - name: Execute hostname and ls in ubuntu pod without ksp present
      #   run: |
      #     # POD_NAME=$(kubectl get pod -n multiubuntu -l container=ubuntu-1 -o name)
      #     PODS_OUTPUT=$(kubectl get pods -n multiubuntu -o jsonpath="{.items[*].metadata.name}")
      #     POD_NAME=$(echo "$PODS_OUTPUT" | tr ' ' '\n' | grep '^ubuntu-1-deployment' | head -n 1)
      #     echo "Executing 'hostname' inside pod: $POD_NAME"
      #     # RESULT=$(kubectl exec $POD_NAME -n multiubuntu -- bash -c "hostname" 2>&1 || true)
      #     RESULT=$(kubectl exec "$POD_NAME" -n multiubuntu -- bash -c "hostname" 2>&1 || true)
      #     echo "Command result: $RESULT"
      #     echo "Executing 'ls' inside pod: $POD_NAME"
      #     RESULT=$(kubectl exec "$POD_NAME" -n multiubuntu -- bash -c "ls" 2>&1 || true)
      #     echo "Command result: $RESULT"
      #
      - name: Get karmor sysdump
        run: |
          kubectl describe pod -n kubearmor -l kubearmor-app=kubearmor
          curl -sfL http://get.kubearmor.io/ | sudo sh -s -- -b /usr/local/bin
          mkdir -p /tmp/kubearmor/ && cd /tmp/kubearmor && karmor sysdump
      - name: Archive log artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kubearmor.logs
          path: |
            /tmp/kubearmor/
            /tmp/kubearmor.*
